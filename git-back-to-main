#!/bin/bash
# co-author : Gemini 2.5 Pro Preview 05/06

# Script to automate returning to the main branch after a feature branch workflow.

set -e # Exit immediately if a command exits with a non-zero status.

MAIN_BRANCH="main" # Configure your main branch name here (e.g., main, master)
REMOTE_NAME="origin"

# Get current branch
current_branch=$(git rev-parse --abbrev-ref HEAD)
remote_main_branch_ref="$REMOTE_NAME/$MAIN_BRANCH"

if [ "$current_branch" = "$MAIN_BRANCH" ]; then
    echo "You are already on the '$MAIN_BRANCH' branch."
    echo "Pulling latest changes for '$MAIN_BRANCH'..."
    git pull "$REMOTE_NAME" "$MAIN_BRANCH"
    exit 0
fi

echo "Current branch: $current_branch"

# Check if there are uncommitted changes
if ! git diff-index --quiet HEAD --; then
    echo "You have uncommitted changes. Please commit or stash them first."
    exit 1
fi

# Ensure the current branch is pushed so the remote state can be checked
echo "Ensuring '$current_branch' is pushed to '$REMOTE_NAME'..."
if git push "$REMOTE_NAME" "$current_branch"; then
    echo "'$current_branch' pushed successfully."
else
    echo "Failed to push '$current_branch'. Please resolve issues and try again."
    exit 1
fi

# --- Automated Merge Check ---
echo "Fetching latest state of '$MAIN_BRANCH' from '$REMOTE_NAME'..."
if ! git fetch "$REMOTE_NAME" "$MAIN_BRANCH"; then
    echo "Failed to fetch '$MAIN_BRANCH' from '$REMOTE_NAME'. Cannot verify merge status."
    exit 1
fi

echo "Verifying if '$current_branch' has been merged into '$remote_main_branch_ref'..."
# Get the tip commit of the current local branch
current_branch_tip=$(git rev-parse HEAD)

# Check if the tip of the current branch is an ancestor of the remote main branch
# `git merge-base --is-ancestor <commit1> <commit2>` returns 0 if commit1 is an ancestor of commit2
if git merge-base --is-ancestor "$current_branch_tip" "$remote_main_branch_ref"; then
    echo "'$current_branch' (commit $current_branch_tip) is merged into '$remote_main_branch_ref'."
else
    # Alternative check using git branch --merged
    merged_branches_output=$(git branch --merged "$remote_main_branch_ref" 2>/dev/null) # Capture output, suppress stderr
    # Process merged_branches_output to get clean branch names
    # Remove asterisk from current branch, strip whitespace
    cleaned_merged_branches=""
    while IFS= read -r line; do
        # Remove leading/trailing whitespace and asterisk
        branch_name=$(echo "$line" | sed 's/^[ *]*//;s/[ ]*$//')
        # Add to list if not empty
        if [ -n "$branch_name" ]; then
            cleaned_merged_branches="$cleaned_merged_branches $branch_name"
        fi
    done <<< "$merged_branches_output"

    # Check if current_branch is in the cleaned list of merged branches
    if echo "$cleaned_merged_branches" | grep -E "(^| )$current_branch( |$)" -q; then
        echo "'$current_branch' appears to be merged into '$remote_main_branch_ref' (checked via local merged branches)."
    else
        echo ""
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        echo "VERIFICATION FAILED: '$current_branch' does not appear to be merged into '$remote_main_branch_ref'."
        echo "This could be due to a squash merge on the remote, or the branch is genuinely not merged."
        echo "Please ensure your changes are merged on the remote (e.g., via a completed Pull Request)"
        echo "and that '$MAIN_BRANCH' has been fetched locally with the latest changes."
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        read -p "Do you want to proceed anyway? (This is risky if not merged) (y/N) " -n 1 -r
        echo
        if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
            echo "Aborted by user. Please complete the remote merge process."
            exit 1
        else
            echo "Proceeding despite failed merge verification..."
        fi
    fi
fi
# --- End of Automated Merge Check ---

# Checkout and pull main branch
echo "Switching to '$MAIN_BRANCH' branch..."
if ! git checkout "$MAIN_BRANCH"; then
    echo "Failed to checkout '$MAIN_BRANCH'."
    exit 1
fi

echo "Pulling latest changes for '$MAIN_BRANCH' (this should be a fast-forward if fetch was recent)..."
if ! git pull "$REMOTE_NAME" "$MAIN_BRANCH"; then
    echo "Failed to pull '$MAIN_BRANCH'."
    exit 1
fi

# Delete the local feature branch
echo "Deleting local branch '$current_branch'..."
if git branch -d "$current_branch"; then
    echo "Local branch '$current_branch' deleted successfully."
else
    echo "Failed to delete local branch '$current_branch' with '-d'."
    echo "This typically means it still has unmerged commits relative to HEAD (which is now $MAIN_BRANCH)."
    echo "This can happen if the merge on the remote was a squash merge, or if the merge verification above was overridden."
    echo "If you are certain it can be deleted, you can try:"
    echo "  git branch -D $current_branch"
    read -p "Force delete local branch '$current_branch'? (y/N) " -n 1 -r force_delete_reply
    echo
    if [[ "$force_delete_reply" =~ ^[Yy]$ ]]; then
        if git branch -D "$current_branch"; then
            echo "Local branch '$current_branch' force deleted."
        else
            echo "Force delete also failed. Manual intervention required."
        fi
    else
        echo "Branch '$current_branch' not force deleted. Please review and delete manually if appropriate."
    fi
fi

echo "Process complete. You are now on the '$MAIN_BRANCH' branch."
