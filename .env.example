# ============================================================================
# Coffee Maker Agent - Environment Variables Template
# ============================================================================
#
# ⚠️ SECURITY WARNING: NEVER COMMIT THE ACTUAL .env FILE TO GIT
#
# This is a TEMPLATE (.env.example) - safe to commit to git.
# Your actual .env file contains real API keys and is in .gitignore.
#
# INSTRUCTIONS:
# 1. Copy this file to .env: cp .env.example .env
# 2. Replace all placeholder values with your actual API keys
# 3. The .env file is already in .gitignore - DO NOT commit it
#
# ============================================================================

# Project Configuration
export COFFEE_MAKER_RUN_CI_TESTS="True"
export COFFEE_MAKER_MAX_CONCURRENCY="1"
export GITHUB_REPOSITORY="YourUsername/YourRepository"

# LangFuse (Analytics & Observability)
# Get keys from: https://cloud.langfuse.com
export LANGFUSE_SECRET_KEY="sk-lf-your-secret-key-here"
export LANGFUSE_PUBLIC_KEY="pk-lf-your-public-key-here"
export LANGFUSE_HOST="https://cloud.langfuse.com"

# Anthropic Claude API (REQUIRED for project-manager chat)
# Get key from: https://console.anthropic.com/
export ANTHROPIC_API_KEY="sk-ant-api03-your-key-here"

# OpenAI API (Optional - for multi-model support)
# Get key from: https://platform.openai.com/api-keys
export OPENAI_API_KEY="sk-proj-your-key-here"

# Google Gemini API (Optional - for multi-model support)
# Get key from: https://makersuite.google.com/app/apikey
export GEMINI_API_KEY="your-gemini-key-here"
export GOOGLE_API_KEY="your-google-api-key-here"

# GitHub Token (Optional - for automated PR creation)
# Get token from: https://github.com/settings/tokens
# Scopes needed: repo (full control)
export GITHUB_TOKEN="ghp_your-github-token-here"

# Hugging Face (Optional - for model downloads)
# Get token from: https://huggingface.co/settings/tokens
export HUGGING_FACE_HUB_TOKEN="hf_your-token-here"

# Gradio (Optional - for UI components)
# export GRADIO_MCP_SERVER=True

# ============================================================================
# Slack Integration (US-034)
# ============================================================================
# Real-time notifications for daemon events, PR updates, and daily summaries
#
# Setup:
# 1. Create Slack app at https://api.slack.com/apps
# 2. Add bot token scopes: chat:write, chat:write.public, channels:read
# 3. Install app to workspace
# 4. Copy Bot User OAuth Token (starts with xoxb-)
# 5. Get channel ID from Slack (right-click channel → Copy link → extract ID)
# ============================================================================

# Enable/disable Slack notifications (default: false)
export SLACK_ENABLED="false"

# Slack Bot User OAuth Token (REQUIRED if enabled)
# Get from: https://api.slack.com/apps → Your App → OAuth & Permissions
export SLACK_BOT_TOKEN="xoxb-your-bot-token-here"

# Slack Channel ID (REQUIRED if enabled)
# Format: C123456789
# Get from: Right-click channel → Copy link → Extract ID from URL
export SLACK_CHANNEL_ID="C123456789"

# Daily summary time (24-hour format HH:MM, default: 18:00)
export SLACK_DAILY_SUMMARY_TIME="18:00"

# Rate limit (messages per second, default: 1.0)
export SLACK_RATE_LIMIT="1.0"

# Max retry attempts for failed messages (default: 3)
export SLACK_MAX_RETRIES="3"

# ============================================================================
# ACE Framework (Agentic Context Engineering)
# ============================================================================
# Enables continuous agent improvement through execution observation and playbook curation
#
# IMPORTANT: ACE is ENABLED BY DEFAULT for ALL agents!
#
# Philosophy: "Default to Learning"
# - All agents learn from their executions automatically
# - Traces captured for reflector analysis
# - Playbooks evolve continuously
# - System improves over time without manual intervention
#
# To DISABLE ACE for specific agents (opt-out):
# Set ACE_ENABLED_{AGENT_NAME}="false"
#
# Why disable? Performance-sensitive agents during development/debugging.
#
# Recommended to keep ENABLED (default) for:
# ✅ user_interpret - Fast operations, high volume, immediate feedback
# ✅ assistant - Good volume, quick feedback loop
# ✅ code-searcher - Clear success metrics
# ✅ project_manager - Strategic decisions benefit from learning
#
# Consider disabling during development:
# ⚠️ code_developer - Slow operations (30min-4hr), may want faster iteration
# ⚠️ user_listener - UI only, no learning needed (delegates to user_interpret)
#
# FUTURE: Streamlit app for visual configuration and monitoring (NEXT PRIORITY)
# ============================================================================

# Agent-Specific ACE Opt-Out (default: ALL ENABLED)
# Only set these to "false" if you want to disable ACE for specific agents
# export ACE_ENABLED_USER_INTERPRET="false"   # Opt-out: disable ACE for user_interpret
# export ACE_ENABLED_ASSISTANT="false"        # Opt-out: disable ACE for assistant
# export ACE_ENABLED_CODE_SEARCHER="false"    # Opt-out: disable ACE for code-searcher
# export ACE_ENABLED_CODE_DEVELOPER="false"   # Opt-out: disable ACE for code_developer
# export ACE_ENABLED_PROJECT_MANAGER="false"  # Opt-out: disable ACE for project_manager
# export ACE_ENABLED_USER_LISTENER="false"    # Opt-out: disable ACE for user_listener (UI only)
# export ACE_ENABLED_ARCHITECT="false"        # Opt-out: disable ACE for architect
# export ACE_ENABLED_CODE_SANITIZER="false"   # Opt-out: disable ACE for code-sanitizer

# ACE Configuration (applies to all enabled agents)
export ACE_AUTO_REFLECT="false"  # Automatically run reflector after executions
export ACE_AUTO_CURATE="false"  # Automatically run curator after reflection
export ACE_TRACE_DIR="docs/generator/traces"  # Directory for execution traces
export ACE_DELTA_DIR="docs/reflector/deltas"  # Directory for delta items
export ACE_PLAYBOOK_DIR="docs/curator/playbooks"  # Directory for playbooks
export ACE_SIMILARITY_THRESHOLD="0.85"  # Semantic similarity threshold (0.0-1.0)
export ACE_PRUNING_RATE="0.10"  # Percentage of bullets to prune (0.0-1.0)
export ACE_MIN_HELPFUL_COUNT="2"  # Minimum helpful count to avoid pruning
export ACE_MAX_BULLETS="150"  # Maximum playbook size
export ACE_REFLECT_BATCH_SIZE="5"  # Number of traces to process per batch
export ACE_EMBEDDING_MODEL="text-embedding-ada-002"  # OpenAI embedding model

# ============================================================================
# SECURITY BEST PRACTICES:
# ============================================================================
#
# ✅ DO:
# - Keep your .env file private and local
# - Use this .env.example as a template
# - Rotate API keys periodically (every 90 days)
# - Use separate keys for development and production
# - Store keys in a password manager
#
# ❌ DON'T:
# - Commit .env to git (it's already in .gitignore)
# - Share API keys in chat, email, or screenshots
# - Use production keys in development
# - Hard-code keys in source code
# - Copy .env to public locations
#
# If you accidentally expose a key:
# 1. Immediately revoke it in the provider's console
# 2. Remove from git history: git rm --cached .env
# 3. Generate a new key
# 4. Update your local .env file
# 5. Check git history: git log --all -- .env
#
# ============================================================================
