#!/bin/bash
# co-author : Gemini 2.5 Pro Preview
# Script to fully clean and reinstall a Poetry environment,
# addressing potential "python" command not found issues.

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# --- Helper Functions ---
info() { echo -e "${GREEN}[INFO]${NC} \"$1\""; }
warn() { echo -e "${YELLOW}[WARN]${NC} \"$1\""; }
error() { echo -e "${RED}[ERROR]${NC} \"$1\"" >&2; exit 1; }


if ! command -v poetry &> /dev/null; then error "Poetry not found."; fi
if [ ! -f "pyproject.toml" ]; then error "No pyproject.toml found."; fi

PYTHON_VERSION_HINT_LINE=$(grep -E '^\s*python\s*=\s*".*"' pyproject.toml || echo "")
PYTHON_VERSION_HINT=$(echo "$PYTHON_VERSION_HINT_LINE" | sed -E 's/^\s*python\s*=\s*"[^0-9]*([0-9]+\.[0-9]+).*".*/\1/' || echo "")
info "Python version hint from pyproject.toml: ~$PYTHON_VERSION_HINT"

PREFERRED_PYTHON_EXE_PATH=""
PYTHON_CANDIDATES=()
if [ -n "$PYTHON_VERSION_HINT" ]; then PYTHON_CANDIDATES+=("python$PYTHON_VERSION_HINT"); fi
PYTHON_CANDIDATES+=("python3")

for candidate in "${PYTHON_CANDIDATES[@]}"; do
    if command -v "$candidate" &> /dev/null; then
        PREFERRED_PYTHON_EXE_PATH=$(command -v "$candidate")
        info "Using Python interpreter: $PREFERRED_PYTHON_EXE_PATH ($($PREFERRED_PYTHON_EXE_PATH --version 2>&1))"
        break
    fi
done
if [ -z "$PREFERRED_PYTHON_EXE_PATH" ]; then error "Suitable Python 3 interpreter not found."; fi

info "Starting clean reinstall for: $(poetry version -s)"
echo "---------------------------------------------------------------------"

if [ -n "$VIRTUAL_ENV" ]; then deactivate || warn "Deactivate failed (often ok)."; fi

if [ -d ".venv" ]; then info "Removing local .venv..."; rm -rf .venv; else info "No local .venv."; fi
CACHED_ENV_PATH=$(poetry env info --path 2>/dev/null || true)
if [ -n "$CACHED_ENV_PATH" ] && [ -d "$CACHED_ENV_PATH" ]; then
    info "Removing cached env: $CACHED_ENV_PATH"; rm -rf "$CACHED_ENV_PATH"
    ENV_NAME=$(basename "$CACHED_ENV_PATH")
    poetry env remove "$ENV_NAME" >/dev/null 2>&1 || poetry env remove "${ENV_NAME#*-}" >/dev/null 2>&1 || warn "Could not formally remove $ENV_NAME from Poetry."
fi
if [ -n "$PYTHON_VERSION_HINT" ]; then
    CLEANED_HINT=$(echo "$PYTHON_VERSION_HINT" | sed 's/[^0-9.]//g')
    poetry env remove "python${CLEANED_HINT}" >/dev/null 2>&1 || warn "No env for python${CLEANED_HINT} to remove."
fi

if [ -f "poetry.lock" ]; then info "Removing poetry.lock..."; rm poetry.lock; fi

info "Attempting to set Poetry to use: $PREFERRED_PYTHON_EXE_PATH"
set +e
POETRY_ENV_USE_OUTPUT=$(poetry env use "$PREFERRED_PYTHON_EXE_PATH" 2>&1)
POETRY_ENV_USE_STATUS=$?
set -e
if [ $POETRY_ENV_USE_STATUS -ne 0 ]; then
    error "poetry env use $PREFERRED_PYTHON_EXE_PATH FAILED. Output:\n$POETRY_ENV_USE_OUTPUT\nThis suggests a problem with Poetry or Python setup."
fi
info "Poetry 'env use' successful or issued non-critical warnings:\n$POETRY_ENV_USE_OUTPUT"


info "Generating new lock file..."
if ! poetry lock; then error "poetry lock FAILED."; fi
info "Installing dependencies..."
if ! poetry install -vvv; then error "poetry install FAILED."; fi

echo "---------------------------------------------------------------------"
info "Clean reinstall complete."
poetry env info
# ... (activation suggestion logic) ...
info "\nTo activate the new environment, typically you would run:"
if [ -d ".venv" ]; then
    echo -e "${YELLOW}  source .venv/bin/activate${NC}"
else
    ACTIVATION_PYTHON_EXE=$(poetry env info --executable 2>/dev/null || true)
    if [ -n "$ACTIVATION_PYTHON_EXE" ]; then
        ACTIVATE_SCRIPT_PATH="$(dirname "$ACTIVATION_PYTHON_EXE")/activate"
        if [ -f "$ACTIVATE_SCRIPT_PATH" ]; then
             echo -e "${YELLOW}  source \"$ACTIVATE_SCRIPT_PATH\"${NC}"
        else
             warn "Could not determine the exact activate script path from a Poetry environment."
             echo -e "${YELLOW}  Consider using 'poetry shell' or 'poetry run <command>'.${NC}"
        fi
    else
        warn "Could not determine the new environment path automatically via 'poetry env info --executable'."
        echo -e "${YELLOW}  Consider using 'poetry shell' or 'poetry run <command>'.${NC}"
    fi
fi
info "Script finished."
