# .github/workflows/pypi-publish.yml
# co-author : Gemini 2.5 Pro Preview

# This workflow will upload a Python Package to PyPI when a release is created.
# It is tailored for projects using Poetry.

name: Upload Python Package to PyPI (Poetry)

on:
  release:
    types: [published] # Runs when you "publish" a release on GitHub

permissions:
  contents: read # Needed to checkout the code

jobs:
  build-package:
    name: Build Python distribution with Poetry
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12" # !!! Need to match your pyproject.toml

      - name: Install Poetry
        uses: snok/install-poetry@v1 # A common action to install Poetry
        # Alternatively, you can install Poetry via pip:
        # run: |
        #   python -m pip install --upgrade pip
        #   python -m pip install poetry

      - name: Configure Poetry (optional, if you need to disable new installer)
        # Only needed if you encounter issues with Poetry if your build process might need them,
      # though `poetry build` itself might not always require a full `poetry install`.
      # If your build script or pyproject.toml's build process has specific dependencies,
      # uncommenting and adapting the next step might be necessary.
      # - name: Install dependencies
      #   run: poetry install --no-interaction --no-root # --no-root if package itself is not installed

      - name: Build release distributions using Poetry
        run: |
          poetry build # This command creates sdist and wheel in dist/

      - name: Upload distributions as artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-dists # Name of the artifact
          path: dist/                 # Path to the directory containing distributions

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    runs-on: ubuntu-latest
    needs:
      - build-package # Depends on the build-package job
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    environment:
      name: pypi # Ensure this matches the environment configured on PyPI and GitHub
      # Replace 'coffee_maker' with your actual PyPI project name if different from pyproject.toml
      url: https://pypi.org/project/coffee_maker/${{ github.event.release.tag_name }}

    steps:
      - name: Retrieve release distributions from artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-dists # Must match the artifact name from the build job
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # No API token needed due to trusted publishing (id-token permission)
        #'s new installer behavior
        # run: poetry config experimental.new-installer false

      - name: Build release distributions using Poetry
        run: |
          # poetry install --no-interaction --no-root # Optional: if build scripts rely on installed deps
                                                      # For simple builds, `poetry build` is often enough.
          poetry build It defaults to publishing to the main PyPI.
        # To publish to TestPyPI, add:
        # with:
        #   repository-url: https://test.pypi.org/legacy/
