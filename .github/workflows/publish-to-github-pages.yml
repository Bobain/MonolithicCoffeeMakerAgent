# .github/workflows/publish-docs-and-reports.yml
# co-author : Gemini 2.5 Pro Preview

name: Build, Test, and Publish Docs & Reports

on:
  push:
    branches: [ "main" ]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read    # For checkout
  pages: write      # For deploying to Pages
  id-token: write   # For OIDC token with Pages
  actions: write    # For writing job summaries / check run annotations (optional but good)
  checks: write     # For creating check runs (optional but good for detailed test results)


jobs:
  build_and_test:
    name: Build, Run Tests, and Generate Reports
    runs-on: ubuntu-latest
    env:
      COFFEE_MAKER_RUN_CI_TESTS: "True"
    outputs:
      pytest_outcome: ${{ steps.run_pytest.outcome }} # Output the test outcome
      package_version: ${{ steps.get_package_version.outputs.version }} # Output package version

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for versioning if needed

      - name: Set up Python 3.12
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true # Creates .venv in project for consistency

      - name: Install dependencies (including dev tools)
        run: poetry install --no-interaction --with dev

      - name: Get Package Version
        id: get_package_version
        run: |
          VERSION=$(poetry version --short)
          echo "PACKAGE_VERSION=${VERSION}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Run Pytest with Coverage and HTML Report
        id: run_pytest # Give this step an ID
        # This step will continue even if tests fail, outcome will be checked later
        run: |
          mkdir -p reports/pytest_report
          mkdir -p reports/coverage
          poetry run pytest tests/ci_tests/ -v \
            --cov=coffee_maker --cov-report=html:reports/coverage \
            --html=reports/pytest_report/index.html --self-contained-html \
            || echo "Pytest execution finished. Outcome will be checked."
        # The '|| echo ...' allows the step to succeed in GitHub Actions
        # while still capturing the actual pytest exit code through 'outcome'.

      - name: Generate pip-audit text report
        run: |
          mkdir -p reports/pip_audit
          poetry run pip-audit --output reports/pip_audit/pip_audit_report.txt || echo "Pip-audit report generation finished."

      - name: Prepare artifact directory and generate pdoc
        run: |
          mkdir -p gh_pages_artifact
          # Generate pdoc directly into the artifact subdirectory
          poetry run pdoc -o gh_pages_artifact/api coffee_maker # Replace 'coffee_maker' with your package name

      - name: Copy Pytest HTML report to artifact directory
        run: |
          if [ -f "reports/pytest_report/index.html" ]; then
            mkdir -p gh_pages_artifact/pytest_tests
            cp reports/pytest_report/index.html gh_pages_artifact/pytest_tests/index.html
          else
            mkdir -p gh_pages_artifact/pytest_tests
            echo "<html><body><h1>Pytest HTML report not generated.</h1></body></html>" > gh_pages_artifact/pytest_tests/index.html
          fi

      - name: Copy Coverage report to artifact directory
        run: |
          if [ -d "reports/coverage" ]; then
            cp -r reports/coverage gh_pages_artifact/coverage
          else
            mkdir -p gh_pages_artifact/coverage
            echo "<html><body><h1>Coverage report not generated.</h1></body></html>" > gh_pages_artifact/coverage/index.html
          fi

      - name: Prepare pip-audit HTML wrapper
        run: |
          mkdir -p gh_pages_artifact/pip_audit
          GENERATED_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          PIP_AUDIT_TXT_PATH="reports/pip_audit/pip_audit_report.txt"
          PIP_AUDIT_HTML_DEST="gh_pages_artifact/pip_audit/index.html"
          WRAPPER_TEMPLATE_PATH=".github/workflows/pages_templates/pip_audit_wrapper.html" # Assumed template path

          if [ -f "$PIP_AUDIT_TXT_PATH" ]; then
            cp "$PIP_AUDIT_TXT_PATH" "gh_pages_artifact/pip_audit/pip_audit_report.txt"
            if [ -f "$WRAPPER_TEMPLATE_PATH" ]; then
              cp "$WRAPPER_TEMPLATE_PATH" "$PIP_AUDIT_HTML_DEST"
              sed -i "s|<!-- TIMESTAMP -->|$GENERATED_TIMESTAMP|g" "$PIP_AUDIT_HTML_DEST"
            else # Minimal fallback if wrapper template is missing
              echo "<html><body><h1><a href='pip_audit_report.txt'>pip_audit_report.txt</a></h1><p>(Wrapper template missing). Generated: $GENERATED_TIMESTAMP</p></body></html>" > "$PIP_AUDIT_HTML_DEST"
            fi
          else # Fallback if pip-audit.txt is missing
            echo "<html><body><h1>pip-audit report not generated.</h1><p>Generated: $GENERATED_TIMESTAMP</p></body></html>" > "$PIP_AUDIT_HTML_DEST"
          fi

      - name: Create main index.html for GitHub Pages from template
        run: |
          TEMPLATE_INDEX_PATH=".github/workflows/pages_templates/index.html"
          DEST_INDEX_PATH="gh_pages_artifact/index.html"
          GENERATED_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          PACKAGE_VERSION="${{ steps.get_package_version.outputs.version }}"

          # Determine the source branch information
          SOURCE_BRANCH_INFO=""
          if [ "${{ github.event_name }}" == "push" ]; then
            SOURCE_BRANCH_INFO="Push to ${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" == "release" ]; then
            SOURCE_BRANCH_INFO="Release: ${{ github.event.release.tag_name }} (target: ${{ github.event.release.target_commitish }})"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            SOURCE_BRANCH_INFO="Manual dispatch on ${{ github.ref_name }}"
            if [ -n "${{ github.event.inputs.ref_to_build_from }}" ]; then # Example if you add an input for ref
              SOURCE_BRANCH_INFO="Manual dispatch, building from: ${{ github.event.inputs.ref_to_build_from }}"
            fi
          else
            SOURCE_BRANCH_INFO="${{ github.ref_name }} (event: ${{ github.event_name }})"
          fi
          echo "Source branch info: $SOURCE_BRANCH_INFO"


          if [ ! -f "$TEMPLATE_INDEX_PATH" ]; then echo "Error: Main index template $TEMPLATE_INDEX_PATH not found."; exit 1; fi
          cp "$TEMPLATE_INDEX_PATH" "$DEST_INDEX_PATH"

          sed -i "s|<!-- TIMESTAMP -->|$GENERATED_TIMESTAMP|g" "$DEST_INDEX_PATH"
          sed -i "s|<!-- PACKAGE_VERSION -->|$PACKAGE_VERSION|g" "$DEST_INDEX_PATH"
          sed -i "s|<!-- SOURCE_BRANCH -->|$SOURCE_BRANCH_INFO|g" "$DEST_INDEX_PATH" # Inject source branch info

          PYTEST_HTML_ITEM='<li class="report-unavailable">CI Test Results: Not available</li>'; if [ -f "gh_pages_artifact/pytest_tests/index.html" ]; then PYTEST_HTML_ITEM='<li class="report-item"><a href="pytest_tests/index.html">CI Test Results (HTML)</a></li>'; fi
          sed -i "s|<!-- PYTEST_REPORT_ITEM -->|$PYTEST_HTML_ITEM|g" "$DEST_INDEX_PATH"

          COVERAGE_HTML_ITEM='<li class="report-unavailable">Code Coverage Report: Not available</li>'; if [ -f "gh_pages_artifact/coverage/index.html" ]; then COVERAGE_HTML_ITEM='<li class="report-item"><a href="coverage/index.html">Code Coverage Report</a></li>'; fi
          sed -i "s|<!-- COVERAGE_REPORT_ITEM -->|$COVERAGE_HTML_ITEM|g" "$DEST_INDEX_PATH"

          PIP_AUDIT_HTML_ITEM='<li class="report-unavailable">pip-audit Security Report: Not available</li>'; if [ -f "gh_pages_artifact/pip_audit/index.html" ]; then PIP_AUDIT_HTML_ITEM='<li class="report-item"><a href="pip_audit/index.html">pip-audit Security Report</a></li>'; fi
          sed -i "s|<!-- PIP_AUDIT_REPORT_ITEM -->|$PIP_AUDIT_HTML_ITEM|g" "$DEST_INDEX_PATH"

          PDOC_API_HTML_ITEM='<li class="report-unavailable">API Documentation (pdoc): Not available</li>'; if [ -f "gh_pages_artifact/api/index.html" ]; then PDOC_API_HTML_ITEM='<li class="report-item"><a href="api/index.html">API Documentation (pdoc)</a></li>'; fi
          sed -i "s|<!-- PDOC_API_DOCS_ITEM -->|$PDOC_API_HTML_ITEM|g" "$DEST_INDEX_PATH"

          echo "Main landing page successfully prepared from template."

      - name: Add .nojekyll
        run: touch gh_pages_artifact/.nojekyll

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh_pages_artifact

  deploy_to_pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build_and_test] # Depends on the build_and_test job
    # This job runs regardless of the outcome of build_and_test due to if: always() in the next job.
    # The artifact will be uploaded even if tests failed.
    # Deployment to Pages itself should ideally happen even if tests failed, so the report is visible.
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    if: always() # Ensures this job runs to deploy artifacts even if build_and_test had issues

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # No specific artifact download needed; deploy-pages action handles the artifact
        # uploaded by upload-pages-artifact in the previous job if it has the default name.

  check_test_status:
    name: Check Pytest Outcome and Fail Workflow if Needed
    runs-on: ubuntu-latest
    needs: [build_and_test, deploy_to_pages] # Wait for deployment to finish
    if: always() # This job must always run to check the outcome

    steps:
      - name: Evaluate Pytest Outcome
        run: |
          echo "Pytest outcome from build_and_test job: ${{ needs.build_and_test.outputs.pytest_outcome }}"
          if [[ "${{ needs.build_and_test.outputs.pytest_outcome }}" == "failure" || "${{ needs.build_and_test.outputs.pytest_outcome }}" == "cancelled" ]]; then
            echo "::error::Pytest execution in 'build_and_test' job failed or was cancelled. Failing workflow."
            exit 1
          elif [[ "${{ needs.build_and_test.outputs.pytest_outcome }}" == "" ]]; then
            echo "::error::Pytest outcome was not captured. This indicates an issue in the 'run_pytest' step setup. Failing workflow."
            exit 1
          else
            echo "Pytest execution in 'build_and_test' job was successful."
          fi
