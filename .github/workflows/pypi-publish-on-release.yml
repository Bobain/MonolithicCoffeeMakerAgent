# .github/workflows/pypi-publish-on-release.yml
# co-author : Gemini 2.5 Pro Preview

# This workflow will upload a Python Package to PyPI when a release is created.
# It is tailored for projects using Poetry.

name: Upload Python Package to PyPI (Poetry)

on:
  release:
    types: [published] # Runs when you "publish" a release on GitHub

permissions:
  contents: read # Needed to checkout the code

jobs:
  build-package:
    name: Build Python distribution with Poetry
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12" # Matches your pyproject.toml

      - name: Install Poetry
        uses: snok/install-poetry@v1
        # Optional settings for snok/install-poetry:
        # with:
        #   virtualenvs-create: true
        #   virtualenvs-in-project: true
        #   installer-parallel: true

      # The following commented-out steps are usually not needed for just `poetry build`
      # but are kept for reference if your build process becomes more complex.
      # - name: Configure Poetry (optional)
      #   run: poetry config experimental.new-installer false # Example config

      # - name: Install dependencies (optional, if build script needs them)
      #   run: poetry install --no-interaction --no-root

      - name: Build release distributions using Poetry
        run: poetry build # This command creates sdist and wheel in dist/

      - name: Upload distributions as artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-dists # Name of the artifact
          path: dist/                 # Path to the directory containing distributions

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    runs-on: ubuntu-latest
    needs:
      - build-package # Depends on the build-package job
    permissions:
      id-token: write # IMPORTANT for trusted publishing

    environment:
      name: pypi # Ensure this matches the environment configured on PyPI and GitHub
      # Update 'coffee-maker' if your PyPI project name differs from pyproject.toml name
      url: https://pypi.org/project/coffee-maker/${{ github.event.release.tag_name }}

    steps:
      - name: Retrieve release distributions from artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-dists # Must match the artifact name from the build job
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
