# .github/workflows/pypi-publish-on-release.yml
# co-author : Gemini 2.5 Pro Preview

name: Test, Build, and Upload Python Package to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  # id-token: write # Only needed if using trusted publishing (OIDC) with GitHub Environments
                   # If using API token, this isn't strictly needed at the workflow level for PyPI.

jobs:
  run_ci_checks:
    name: Perform CI Checks
    uses: ./.github/workflows/reusable-ci-checks.yml
    with:
      python-version: "3.12"
      os: 'ubuntu-latest'
      COFFEE_MAKER_RUN_CI_TESTS_VALUE: "True" # Explicitly set for release builds
                                            # Or "False" if tests needing it should not run/fail for release builds

  build-package:
    name: Build Python distribution
    runs-on: ubuntu-latest
    needs: [run_ci_checks]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Verify version consistency
        run: |
          PYPROJECT_VERSION=$(poetry version --short)
          TAG_NAME="${{ github.event.release.tag_name }}"
          TAG_VERSION="${TAG_NAME#v}"
          echo "Version in pyproject.toml: $PYPROJECT_VERSION"
          echo "Version from GitHub tag: $TAG_VERSION (original tag: $TAG_NAME)"
          if [ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Version in pyproject.toml ('$PYPROJECT_VERSION') does not match tag version ('$TAG_VERSION')!"
            exit 1
          fi
          echo "Versions successfully verified."

      - name: Install dependencies and build
        run: |
          # poetry version ${{ github.event.release.tag_name }} # This might fail if tag has 'v' and poetry doesn't expect it, or vice-versa
                                                               # The verification above is usually sufficient.
                                                               # If needed, ensure poetry version aligns with TAG_VERSION (without 'v')
          poetry install --no-dev --no-interaction --sync
          poetry build

      - name: Upload distributions as artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-dists-${{ github.event.release.tag_name }}
          path: dist/

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    runs-on: ubuntu-latest
    needs: [build-package]
    # Removed 'environment:' key to avoid GitHub Environments for PyPI
    # 'permissions: id-token: write' would be needed if you were using OIDC trusted publishing.
    # For token-based auth, the token is usually passed via a secret in the 'with' block of the pypa action.

    steps:
      - name: Retrieve release distributions from artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-dists-${{ github.event.release.tag_name }}
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # You now NEED to provide an API token if not using trusted publishing / OIDC
          # Store this token as a secret in your GitHub repository settings
          # e.g., name it PYPI_API_TOKEN
          password: ${{ secrets.PYPI_API_TOKEN }}
          # repository_url: https://test.pypi.org/legacy/ # Uncomment to publish to TestPyPI
