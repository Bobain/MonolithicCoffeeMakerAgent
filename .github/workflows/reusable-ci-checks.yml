# .github/workflows/reusable-ci-checks.yml
# co-author : Gemini 2.5 Pro Preview

name: Reusable CI Checks

on:
  workflow_call: # This makes it a reusable workflow
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string
      os:
        description: 'Operating system to run on'
        required: false # Make it optional if you usually use one, or required
        type: string
        default: 'ubuntu-latest'

jobs:
  perform-checks:
    name: CI Checks on Python ${{ inputs.python-version }} OS ${{ inputs.os }}
    runs-on: ${{ inputs.os }}
    defaults:
      run:
        shell: bash # Explicitly set shell if needed, though usually defaults fine

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: poetry-cache # Give it an id if you need to reference its output, though not critical here
        with:
          path: .venv
          key: ${{ inputs.os }}-poetry-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ inputs.os }}-poetry-${{ inputs.python-version }}-

      - name: Install dependencies (if cache miss)
        # Note: poetry install --no-root is often for libraries. If this is an app, --no-root might be omitted.
        # Kept as per your original CI.
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev --no-root

      - name: Install project and all dependencies
        run: poetry install --no-interaction --with dev

      - name: Run tests (pytest)
        run: |
          poetry run pytest tests/ci_tests/ -v
          # Removed coverage generation from here, as it's specific to the Pages deployment workflow.
          # If coverage data IS needed by the calling workflow, this reusable one could output it as an artifact.

      - name: Run pip-audit
        run: |
          poetry run pip-audit
          # This will fail the job if pip-audit finds vulnerabilities and exits non-zero.
