# .github/workflows/run-ci-tests.yml
# co-author : Gemini 2.5 Pro Preview

name: ci-tests

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    name: ci-tests ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev --no-root

      - name: Install project and dependencies
        run: poetry install --no-interaction --with dev

      - name: Run tests and collect coverage data
        env:
          COFFEE_MAKER_RUN_CI_TESTS: ${{ secrets.COFFEE_MAKER_RUN_CI_TESTS }}
        run: |
          poetry run pytest tests/ci_tests/ -v --cov=coffee_maker --cov-report=xml:coverage.xml --cov-report=html:cov_html

      - name: Upload coverage report (XML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml

      - name: Prepare Pages artifact by adding .nojekyll
        if: always()
        run: |
          if [ -d "cov_html" ]; then
            echo "cov_html directory exists. Creating .nojekyll file."
            touch cov_html/.nojekyll
          else
            echo "Error: cov_html directory does not exist. Cannot create .nojekyll."
            # Optionally, create cov_html and .nojekyll if you want an empty page on test failure
            # mkdir cov_html
            # touch cov_html/.nojekyll
            # echo "<html><body><h1>Coverage report generation failed.</h1></body></html>" > cov_html/index.html
            # exit 1 # Or let it proceed to upload an empty/error page
          fi

      # ADD/MODIFY THIS VERIFICATION STEP:
      - name: Verify Pages artifact contents
        if: always()
        run: |
          echo "Listing contents of cov_html directory before upload:"
          if [ -d "cov_html" ]; then
            ls -la cov_html
            if [ -f "cov_html/.nojekyll" ]; then
              echo ".nojekyll file found in cov_html."
            else
              echo "Error: .nojekyll file NOT found in cov_html."
            fi
          else
            echo "Error: cov_html directory does not exist for verification."
          fi

      - name: Upload HTML coverage artifact for GitHub Pages
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: cov_html

      - name: Deploy HTML coverage to GitHub Pages
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Run pip-audit #--ignore=pyyaml for instance if you want to ignore a specific package
        run: |
          poetry run pip-audit --fail-on=high --fail-on=critical
