# .github/workflows/run-ci-tests.yml
# co-author : Gemini 2.5 Pro Preview

name: ci-tests

on:
  push:
    branches: [ "main" ]

permissions: # Add this
  contents: read
  pages: write # Required to deploy to GitHub Pages
  id-token: write # Required for trusted publishing

jobs:
  test:
    name: ci-tests ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    environment:
      name: github-pages # Optional: if you want to use a Pages environment
      # url: ${{ steps.deployment.outputs.page_url }} # Optional: link to the deployed page
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          # Consider adding:
          # version: "latest" # Or a specific Poetry version

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: poetry-cache # Give an id to the cache step
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      - name: Install dependencies
        # Ensure cache is hit before running install
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev --no-root
        # --no-root can be useful if your project itself isn't installed as editable during tests

      - name: Install project and dependencies (if cache not hit for poetry install or if project files changed)
        run: poetry install --no-interaction --with dev

      - name: Run tests and collect coverage data
        env:
          COFFEE_MAKER_RUN_CI_TESTS: ${{ secrets.COFFEE_MAKER_RUN_CI_TESTS }} # Ensure this secret is set in your repository settings
          # Add other necessary env vars for your tests
        run: |
          poetry run pytest tests/ci_tests/ -v --cov=coffee_maker --cov-report=xml:coverage.xml --cov-report=html:cov_html
          # Ensure 'coffee_maker' is the correct path to your source code for coverage

      - name: Upload coverage report (XML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml

      # New steps for GitHub Pages
      - name: Upload HTML coverage artifact for GitHub Pages
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: cov_html # Upload the entire HTML report directory

      - name: Deploy HTML coverage to GitHub Pages
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main' # Deploy only on push to main
        id: deployment
        uses: actions/deploy-pages@v4
        # This step needs the 'pages: write' and 'id-token: write' permissions set at the job or workflow level.
